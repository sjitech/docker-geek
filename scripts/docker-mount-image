#!/bin/bash
set -o errexit -o pipefail

function show_usage() {
  >&2 echo "Mount an image (as readonly by default)."
  >&2 echo ""
  >&2 echo "Usage:"
  >&2 echo "  ${0##*/} [OPTIONS] IMAGE_ID_OR_NAME MOUNT_POINT"
  >&2 echo ""
  >&2 echo "OPTIONS:"
  >&2 echo "  -w, --writeable                      Mount as writable"
  >&2 echo ""
  >&2 echo "Note:"
  >&2 echo "  - You can specify an container's id or name as IMAGE_ID_OR_NAME."
  >&2 echo ""
  exit 1
}

OPT_WRITABLE="";

while [[ $# > 0 ]]; do
  case $1 in
  -w|--writable)
    OPT_WRITABLE=$1
    ;;
  -*)
    show_usage
    ;;
  *)
    break
    ;;
  esac
  shift
done

ID=${1:?${0##*/}: require next argument as an id or name of an image}; shift
MOUNT_POINT=${1:?${0##*/}: require next argument as MOUNT_POINT}; shift

if [[ ! $IS_DOCKER_GEEK ]]; then
  [[ $MOUNT_POINT != /* ]] && { >&2 echo "${0##*/}: when running this command from outside of docker-geek, the mount point on the host must not be a relative path."; exit 1; }
  [[ $MOUNT_POINT != /var/lib/docker/* ]] && { >&2 echo "${0##*/}: when running this command from outside of docker-geek, the mount point on the host must not be outside of /var/lib/docker, otherwise it will have no effect to the host side."; exit 1; }
fi

LAYERS=($(docker-layers-of-image "$ID")); LAYERS=${LAYERS[*]}; LAYERS=${LAYERS// /:}

if [[ $IS_DOCKER_GEEK ]]; then
  exec mount-overlay $OPT_WRITABLE "$LAYERS" "$MOUNT_POINT"
else
  exec docker-geek mount-overlay $OPT_WRITABLE "$LAYERS" "$MOUNT_POINT"
fi
