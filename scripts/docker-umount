#!/bin/bash
set -o errexit -o pipefail

function show_usage() {
  >&2 echo "Unmount a dir in the host or a container."
  >&2 echo ""
  >&2 echo "Usage:"
  >&2 echo "  ${0##*/} [OPTIONS] [CONTAINER:]MOUNT_POINT"
  >&2 echo ""
  >&2 echo "OPTIONS:"
  >&2 echo "  -R, --recursive                      Recursively unmount"
  >&2 echo ""
  exit 1
}

OPT_RECURSIVE=""

while [[ $# > 0 ]]; do
  case $1 in
  -R|--recursive)
    OPT_RECURSIVE=$1
    ;;
  -*)
    show_usage
    ;;
  *)
    break
    ;;
  esac
  shift
done

MOUNT_POINT=${1:?${0##*/}: require next argument as MOUNT_POINT or CONTAINER:MOUNT_POINT}; shift

ID=""
if [[ $MOUNT_POINT == *:* ]]; then
  ID=${MOUNT_POINT%%:*}
  MOUNT_POINT=${MOUNT_POINT#*:}
  [[ ! $MOUNT_POINT ]] && { >&2 echo "${0##*/}: the mount point must not be empty."; exit 1; }
fi
[[ $ID && $MOUNT_POINT != /* ]] && { >&2 echo "${0##*/}: the mount point must not be a relative path when it is for a container.."; exit 1; }

if [[ ! $IS_DOCKER_GEEK && ! $ID ]]; then
  [[ $MOUNT_POINT != /* ]] && { >&2 echo "${0##*/}: when running this command from outside of docker-geek, the mount point on the host must not be a relative path."; exit 1; }
  [[ $MOUNT_POINT != /var/lib/docker/* ]] && { >&2 echo "${0##*/}: when running this command from outside of docker-geek, the mount point on the host must not be outside of /var/lib/docker, otherwise it will have no effect to the host side."; exit 1; }
fi

ROOTFS=""; [[ $ID ]] && ROOTFS=$(docker container inspect -f '{{.GraphDriver.Data.MergedDir}}' "$ID")

if [[ $IS_DOCKER_GEEK ]]; then
  exec umount $OPT_RECURSIVE "$ROOTFS$MOUNT_POINT"
else
  exec docker-geek umount $OPT_RECURSIVE "$ROOTFS$MOUNT_POINT"
fi
