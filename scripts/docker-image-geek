#!/bin/bash
set -o errexit -o pipefail

function show_usage() {
  >&2 echo "Start a docker-geek in which mount an image to /rootfs (as readonly by default)."
  >&2 echo ""
  >&2 echo "Usage:"
  >&2 echo "  ${0##*/} [OPTIONS] IMAGE_ID_OR_NAME [COMMAND [ARGS...]]"
  >&2 echo ""
  >&2 echo "OPTIONS:"
  >&2 echo "  -i, --interactive                    Keep STDIN open even if not attached"
  >&2 echo "  -t, --tty                            Allocate a pseudo-TTY"
  >&2 echo ""
  >&2 echo "  -w, --writeable                      Mount as writable"
  >&2 echo ""
  >&2 echo "Note:"
  >&2 echo "  - If no any argument specified, it will run an interactive /bin/bash (implies '-i' and '-t')."
  >&2 echo "  - You can pass extra docker run option via env var DOCKER_GEEK_OPTION"
  >&2 echo ""
  exit 1
}

OPT_INTERACTIVE=""; OPT_TTY=""; OPT_WRITABLE="";

while [[ $# > 0 ]]; do
  case $1 in
  -i|--interactive)
    OPT_INTERACTIVE=$1
    ;;
  -t|--tty)
    OPT_TTY=$1
    ;;
  -w|--writable)
    OPT_WRITABLE=$1
    ;;
  -*)
    [[ ! $1 =~ ^-[itw]+$ ]] && show_usage
    [[ $1 == *i* ]] && OPT_INTERACTIVE=-i
    [[ $1 == *t* ]] && OPT_TTY=-t
    [[ $1 == *w* ]] && OPT_WRITABLE=-w
    ;;
  *)
    break
    ;;
  esac
  shift
done

ID=${1:?${0##*/}: require next argument as an id or name of an image}; shift

if [[ $# == 0 && ! $OPT_INTERACTIVE && ! $OPT_TTY ]]; then
  OPT_INTERACTIVE=-i
  OPT_TTY=-t
fi

LAYERS=($(docker-layers-of "$ID")); LAYERS=${LAYERS[*]}; LAYERS=${LAYERS// /:}

[[ ! $ID =~ ^[0-9a-f]{12}$ && ! $ID =~ ^[0-9a-f]{64}$ ]] && ID=$(docker inspect -f '{{.ID}}' "$ID")
ID=${ID#sha256:}

CMD=("$@"); [[ $# == 0 ]] && CMD=(bash -l)

export DOCKER_GEEK_NETWORK_NS="--network=host --hostname=GEEK-${ID:0:12} --add-host GEEK-${ID:0:12}:127.0.0.1"
exec docker-geek $OPT_INTERACTIVE $OPT_TTY sh -c \
    "mount-overlay $OPT_WRITABLE $LAYERS /rootfs && cd /rootfs && exec \"\$@\"" \
      - "${CMD[@]}"
